scn aaKFOVEventScript

int iDoOnce

; this script simply sets defaults upon game load
; since i use globals, it'll save to the save game

; set whatever was saved to the global as our FOV
; and set up eventhandlers for game exit
begin Function {}
	if GetGameRestarted ; set up eventhandlers
		let aaKFOV.iLastFOV1st := FOV1st
		let aaKFOV.iLastFOV3rd := FOV3rd
    call aaKFOVSetFOV 0

		SetEventHandler "QQQ" aaKFOVSetDefault
		SetEventHandler "ExitGame" aaKFOVSetDefault

		call aaKFOVGetModData

		; call each weather array
		if aakfov.EnableWeatherMode == 1
			let aaKFOV.aWeather := ar_Construct Array
			call aaKFOVArrayWVanilla		; purely vanilla weathers

			if (IsModLoaded "NAO.esp" && aaKFOV.EnableNAOWeathers == 1)
				call aaKFOVWArrayNAO
			endif
		endif

		; set at game loaded
		SetEventHandler "OnControlEvent" aaKFOVUpdateFOV first::14 second::0
		if aaKFOV.EnableFOVMode == 1
			SetEventHandler "OnKeyEvent" aaKFOVPKeyEvent first::aaKFOV.FOVModeKey second::0		; fov mode
		endif
		if aaKFOV.EnableWeatherMode == 1
			SetEventHandler "OnKeyEvent" aaKFOVIKeyEvent first::aaKFOV.WeatherModeKey second::0		; weather mode
		endif
		if aaKFOV.EnableHUDToggle == 1
			SetEventHandler "OnKeyEvent" aaKFOVToggleHUDScript first::aaKFOV.ToggleHUDKey second::0		; toggle mode
		endif
		if aaKFOV.EnableFreeCamSupport == 1
			SetEventHandler "OnKeyEvent" aaKFOVToggleFreecam first::aaKFOV.ToggleFreecamKey second::0		; freecam mode
		endif
		; make sure everything is updated based on settings
		set iDoOnce to 1
	endif
	if iDoOnce == 1 ; notify that it's setup
		PrintC "FOV settings loaded"
		PrintC "Set desired FOV by running:%rset fov1st to #%rset fov3rd to #"
		set iDoOnce to 0
	endif
end
